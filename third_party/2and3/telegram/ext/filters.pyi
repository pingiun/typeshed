# Stubs for telegram.ext.filters (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class BaseFilter:
    name: Any = ...
    def __call__(self, message: Any): ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __invert__(self): ...
    def filter(self, message: Any) -> None: ...

class InvertedFilter(BaseFilter):
    f: Any = ...
    def __init__(self, f: Any) -> None: ...
    def filter(self, message: Any): ...

class MergedFilter(BaseFilter):
    base_filter: Any = ...
    and_filter: Any = ...
    or_filter: Any = ...
    def __init__(self, base_filter: Any, and_filter: Optional[Any] = ..., or_filter: Optional[Any] = ...) -> None: ...
    def filter(self, message: Any): ...

class Filters:
    class _All(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    all: Any = ...
    class _Text(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    text: Any = ...
    class _Command(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    command: Any = ...
    class regex(BaseFilter):
        pattern: Any = ...
        name: Any = ...
        def __init__(self, pattern: Any) -> None: ...
        def filter(self, message: Any): ...
    class _Reply(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    reply: Any = ...
    class _Audio(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    audio: Any = ...
    class _Document(BaseFilter):
        name: str = ...
        class category(BaseFilter):
            category: Any = ...
            name: Any = ...
            def __init__(self, category: Any) -> None: ...
            def filter(self, message: Any): ...
        application: Any = ...
        audio: Any = ...
        image: Any = ...
        video: Any = ...
        text: Any = ...
        class mime_type(BaseFilter):
            mimetype: Any = ...
            name: Any = ...
            def __init__(self, mimetype: Any) -> None: ...
            def filter(self, message: Any): ...
        apk: Any = ...
        doc: Any = ...
        docx: Any = ...
        exe: Any = ...
        gif: Any = ...
        jpg: Any = ...
        mp3: Any = ...
        pdf: Any = ...
        py: Any = ...
        svg: Any = ...
        txt: Any = ...
        targz: Any = ...
        wav: Any = ...
        xml: Any = ...
        zip: Any = ...
        def filter(self, message: Any): ...
    document: Any = ...
    class _Animation(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    animation: Any = ...
    class _Photo(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    photo: Any = ...
    class _Sticker(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    sticker: Any = ...
    class _Video(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    video: Any = ...
    class _Voice(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    voice: Any = ...
    class _VideoNote(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    video_note: Any = ...
    class _Contact(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    contact: Any = ...
    class _Location(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    location: Any = ...
    class _Venue(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    venue: Any = ...
    class _StatusUpdate(BaseFilter):
        class _NewChatMembers(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        new_chat_members: Any = ...
        class _LeftChatMember(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        left_chat_member: Any = ...
        class _NewChatTitle(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        new_chat_title: Any = ...
        class _NewChatPhoto(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        new_chat_photo: Any = ...
        class _DeleteChatPhoto(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        delete_chat_photo: Any = ...
        class _ChatCreated(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        chat_created: Any = ...
        class _Migrate(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        migrate: Any = ...
        class _PinnedMessage(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        pinned_message: Any = ...
        class _ConnectedWebsite(BaseFilter):
            name: str = ...
            def filter(self, message: Any): ...
        connected_website: Any = ...
        name: str = ...
        def filter(self, message: Any): ...
    status_update: Any = ...
    class _Forwarded(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    forwarded: Any = ...
    class _Game(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    game: Any = ...
    class entity(BaseFilter):
        entity_type: Any = ...
        name: Any = ...
        def __init__(self, entity_type: Any) -> None: ...
        def filter(self, message: Any): ...
    class caption_entity(BaseFilter):
        entity_type: Any = ...
        name: Any = ...
        def __init__(self, entity_type: Any) -> None: ...
        def filter(self, message: Any): ...
    class _Private(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    private: Any = ...
    class _Group(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    group: Any = ...
    class user(BaseFilter):
        user_ids: Any = ...
        usernames: Any = ...
        def __init__(self, user_id: Optional[Any] = ..., username: Optional[Any] = ...) -> None: ...
        def filter(self, message: Any): ...
    class chat(BaseFilter):
        chat_ids: Any = ...
        usernames: Any = ...
        def __init__(self, chat_id: Optional[Any] = ..., username: Optional[Any] = ...) -> None: ...
        def filter(self, message: Any): ...
    class _Invoice(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    invoice: Any = ...
    class _SuccessfulPayment(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    successful_payment: Any = ...
    class _PassportData(BaseFilter):
        name: str = ...
        def filter(self, message: Any): ...
    passport_data: Any = ...
    class language(BaseFilter):
        lang: Any = ...
        name: Any = ...
        def __init__(self, lang: Any) -> None: ...
        def filter(self, message: Any): ...
