# Stubs for telegram.ext.jobqueue (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class Days:
    MON: Any = ...
    TUE: Any = ...
    WED: Any = ...
    THU: Any = ...
    FRI: Any = ...
    SAT: Any = ...
    SUN: Any = ...
    EVERY_DAY: Any = ...

class JobQueue:
    bot: Any = ...
    logger: Any = ...
    def __init__(self, bot: Any) -> None: ...
    def run_once(self, callback: Any, when: Any, context: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def run_repeating(self, callback: Any, interval: Any, first: Optional[Any] = ..., context: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def run_daily(self, callback: Any, time: Any, days: Any = ..., context: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def tick(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def jobs(self): ...
    def get_jobs_by_name(self, name: Any): ...

class Job:
    callback: Any = ...
    context: Any = ...
    name: Any = ...
    interval: Any = ...
    repeat: Any = ...
    days: Any = ...
    def __init__(self, callback: Any, interval: Optional[Any] = ..., repeat: bool = ..., context: Optional[Any] = ..., days: Any = ..., name: Optional[Any] = ..., job_queue: Optional[Any] = ...) -> None: ...
    def run(self, bot: Any) -> None: ...
    def schedule_removal(self) -> None: ...
    @property
    def removed(self): ...
    @property
    def enabled(self): ...
    @enabled.setter
    def enabled(self, status: Any) -> None: ...
    @property
    def interval(self): ...
    @interval.setter
    def interval(self, interval: Any) -> None: ...
    @property
    def interval_seconds(self): ...
    @property
    def repeat(self): ...
    @repeat.setter
    def repeat(self, repeat: Any) -> None: ...
    @property
    def days(self): ...
    @days.setter
    def days(self, days: Any) -> None: ...
    @property
    def job_queue(self): ...
    @job_queue.setter
    def job_queue(self, job_queue: Any) -> None: ...
    def __lt__(self, other: Any): ...
